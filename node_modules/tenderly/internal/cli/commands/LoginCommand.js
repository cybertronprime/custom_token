"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginCommand = void 0;
const open_1 = __importDefault(require("open"));
const axios_1 = __importDefault(require("axios"));
const prompts_1 = __importDefault(require("prompts"));
const commander_1 = __importDefault(require("commander"));
const logger_1 = require("../../../utils/logger");
const config_1 = require("../../../utils/config");
const constants_1 = require("../../../common/constants");
exports.LoginCommand = new commander_1.default.Command("login").description("login to Tenderly").action(async () => {
    logger_1.logger.info("Trying to login to Tenderly.");
    if ((0, config_1.isAccessTokenSet)()) {
        logger_1.logger.debug("Access token is already set. Checking if access token overwrite is needed.");
        const response = await (0, prompts_1.default)({
            type: "confirm",
            name: "overwrite",
            message: "Access token already set. Would you like to overwrite it?",
        });
        if (!response.overwrite) {
            logger_1.logger.debug("Access token overwrite skipped. Trying to login with the existing token.");
            return;
        }
    }
    logger_1.logger.info("Access token not set.");
    const accessToken = await promptAccessToken();
    logger_1.logger.debug("Access token accepted. Trying to log in.");
    (0, config_1.setAccessToken)(accessToken);
    console.log("Successfully logged in to Tenderly.");
    logger_1.logger.info("Successfully logged in to Tenderly.");
});
async function promptAccessToken() {
    console.log(`Redirecting to ${constants_1.TENDERLY_DASHBOARD_BASE_URL}/account/authorization`);
    logger_1.logger.debug(`Redirecting to ${constants_1.TENDERLY_DASHBOARD_BASE_URL}/account/authorization`);
    await (0, open_1.default)(`${constants_1.TENDERLY_DASHBOARD_BASE_URL}/account/authorization`);
    logger_1.logger.info("Requesting access token.");
    const response = await (0, prompts_1.default)({
        type: "text",
        name: "accessToken",
        message: "Enter access token",
        validate: validator,
    });
    logger_1.logger.info("Access token accepted.");
    return response.accessToken;
}
const validator = async function (value) {
    if (value.length !== 32) {
        return "Invalid access token: length must be exactly 32 characters";
    }
    const canAuth = await canAuthenticate(value);
    if (!canAuth) {
        return "Invalid access token: unable to authenticate";
    }
    return true;
};
async function canAuthenticate(accessToken) {
    try {
        logger_1.logger.debug("Checking if access token is valid.");
        const response = await axios_1.default.get(`${constants_1.TENDERLY_API_BASE_URL}/api/v1/user`, {
            headers: { "x-access-key": accessToken },
        });
        if (response.data.user === undefined || response.data.user === null) {
            logger_1.logger.error("Access token is invalid.");
            return false;
        }
        logger_1.logger.debug("Access token is valid.");
        return true;
    }
    catch (err) {
        logger_1.logger.error("Authentication error.");
        return false;
    }
}
//# sourceMappingURL=LoginCommand.js.map