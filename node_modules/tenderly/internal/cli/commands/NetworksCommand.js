"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworksCommand = void 0;
const cli_table3_1 = __importDefault(require("cli-table3"));
const commander_1 = __importDefault(require("commander"));
const logger_1 = require("../../../utils/logger");
const constants_1 = require("../../../common/constants");
const services_1 = require("../../core/services");
const log_compliance_1 = require("../../../utils/log-compliance");
const tenderlyService = new services_1.TenderlyService(constants_1.PLUGIN_NAME);
exports.NetworksCommand = new commander_1.default.Command("networks")
    .description("list all Tenderly supported networks")
    .option("-v, --verbose", "display detailed network information")
    .action(async (options) => {
    const verbose = options.verbose !== undefined && options.verbose === true;
    const headers = ["Network ID", "Network name"];
    if (verbose) {
        headers.push("Latest block number");
    }
    const networks = await tenderlyService.getNetworks();
    const filteredNetworks = networks.filter(isNotExcluded);
    filteredNetworks.sort((a, b) => a.sort_order - b.sort_order);
    const logCompliantNetworks = (0, log_compliance_1.convertToLogCompliantNetworks)(filteredNetworks);
    logger_1.logger.silly("Obtained filtered public networks:", logCompliantNetworks);
    const table = new cli_table3_1.default({
        style: { head: ["magenta"] },
        head: headers,
    });
    table.push(...(await Promise.all(filteredNetworks.map(async (network) => {
        if (verbose) {
            const blockNumber = await tenderlyService.getLatestBlockNumber(network.ethereum_network_id);
            return [network.ethereum_network_id, network.name, blockNumber];
        }
        else {
            return [network.ethereum_network_id, network.name];
        }
    }))));
    logger_1.logger.silly("Networks table:", table);
    console.log(table.toString());
});
function isNotExcluded(element) {
    return element.metadata.exclude_from_listing === undefined || element.metadata.exclude_from_listing === false;
}
//# sourceMappingURL=NetworksCommand.js.map