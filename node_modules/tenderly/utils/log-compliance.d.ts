import { ApiContract, BytecodeMismatchError, ContractResponse, VerifyContractsResponse } from "../internal/core/types";
import { TenderlyConfig } from "../types";
export declare function convertToLogCompliantApiError(err: any): string | undefined;
export declare function convertToLogCompliantForkVerificationResponse(res: ContractResponse): {
    contracts: {
        id: string;
        contract_id: string;
        balance: string;
        network_id: string;
        public: boolean;
        export: boolean;
        verification_date: string;
        address: string;
        contract_name: string;
        ens_domain: string[];
        type: string;
        evm_version: string;
        compiler_version: string;
        optimizations_used: boolean;
        optimization_runs: number;
        libraries: Record<string, string>;
        data: object;
        creation_block: number;
        creation_tx: string;
        creator_address: string;
        created_at: string;
        number_of_watches: number;
        language: string;
        in_project: boolean;
        number_of_files: number;
    }[] | undefined;
    bytecode_mismatch_errors: {
        contract_id: string;
        expected: string;
        got: string;
        similarity: number;
        assumed_reason: string;
    }[] | undefined;
};
export declare function convertToLogCompliantContracts(contracts: ApiContract[]): {
    id: string;
    contract_id: string;
    balance: string;
    network_id: string;
    public: boolean;
    export: boolean;
    verification_date: string;
    address: string;
    contract_name: string;
    ens_domain: string[];
    type: string;
    evm_version: string;
    compiler_version: string;
    optimizations_used: boolean;
    optimization_runs: number;
    libraries: Record<string, string>;
    data: object;
    creation_block: number;
    creation_tx: string;
    creator_address: string;
    created_at: string;
    number_of_watches: number;
    language: string;
    in_project: boolean;
    number_of_files: number;
}[] | undefined;
export declare function convertToLogCompliantBytecodeMismatchErrors(bytecodeMismatchErrors: BytecodeMismatchError[]): {
    contract_id: string;
    expected: string;
    got: string;
    similarity: number;
    assumed_reason: string;
}[] | undefined;
export declare function convertToLogCompliantVerificationResponse(res: VerifyContractsResponse): {
    results: {
        verified_contracts: {
            id: any;
            contract_id: any;
            balance: any;
            network_id: any;
            public: any;
            export: any;
            verification_date: any;
            address: any;
            contract_name: any;
            ens_domain: any;
            type: any;
            evm_version: any;
            compiler_version: any;
            optimizations_used: any;
            optimization_runs: any;
            libraries: any;
            data: any;
            creation_block: any;
            creation_tx: any;
            creator_address: any;
            created_at: any;
            number_of_watches: any;
            language: any;
            in_project: any;
            number_of_files: any;
        }[];
        bytecode_mismatch_errors: {
            contract_id: string;
            expected: string;
            got: string;
            similarity: number;
            assumed_reason: string;
        }[];
    } | undefined;
    compilation_errors: {
        source_location: import("../types").SourceLocation;
        error_type: string;
        component: string;
        message: string;
        formatted_message: string;
    }[] | undefined;
    display_link: string | undefined;
};
export declare function convertToLogCompliantProjects(projects: any[]): {
    project_id: any;
    project_name: any;
    project_slug: any;
    high_volume: any;
    in_transfer: any;
    is_module: any;
    created_at: any;
    last_push_at: any;
    number_of_users: any;
    options: any;
    owner_principal_id: any;
    owner_principal_type: any;
    owner_permissions_for_project: any;
}[] | undefined;
export declare function convertToLogCompliantNetworks(networks: any[]): {
    id: any;
    name: any;
    ethereum_network_id: any;
    slug: any;
    metadata: {
        color: any;
        explorer_base_url: any;
        icon: any;
        label: any;
        native_currency: any;
        secondary_slugs: any;
        short_identifier: any;
        slug: any;
    };
    chain_config: any;
    sort_order: any;
}[] | undefined;
export declare function convertToLogCompliantForkInitializeResponse(res: any): {
    fork_id: any;
    root_transaction: any;
    project_id: any;
};
export declare function convertToLogCompliantTenderlyConfig(config: TenderlyConfig): {
    email: string;
    account_id: string;
    username: string;
    access_key: string;
    access_key_id: string;
};
//# sourceMappingURL=log-compliance.d.ts.map