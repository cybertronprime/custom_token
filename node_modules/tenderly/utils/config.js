"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAccessToken = exports.getAccessToken = exports.isAccessTokenSet = exports.configExists = exports.writeConfig = exports.getConfig = exports.configFilePath = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const yaml = __importStar(require("js-yaml"));
const logger_1 = require("./logger");
const log_compliance_1 = require("./log-compliance");
const configDir = `${os_1.default.homedir() + path_1.default.sep}.tenderly`;
exports.configFilePath = `${configDir + path_1.default.sep}config.yaml`;
function getConfig() {
    logger_1.logger.trace("Getting tenderly config.");
    if (configExists()) {
        const fileData = fs_1.default.readFileSync(exports.configFilePath);
        const tenderlyConfig = yaml.load(fileData.toString());
        const logCompliantTenderlyConfig = (0, log_compliance_1.convertToLogCompliantTenderlyConfig)(tenderlyConfig);
        logger_1.logger.trace("Checking config:", logCompliantTenderlyConfig);
        return tenderlyConfig;
    }
    logger_1.logger.warn("Tenderly config doesn't exist, empty string values are returned instead.");
    return {
        access_key: "",
        access_key_id: "",
        account_id: "",
        email: "",
        token: "",
        username: "",
    };
}
exports.getConfig = getConfig;
function writeConfig(config) {
    logger_1.logger.trace(`Writing tenderly config to a file @ ${configDir}/${exports.configFilePath}`);
    const logCompliantTenderlyConfig = (0, log_compliance_1.convertToLogCompliantTenderlyConfig)(config);
    logger_1.logger.trace("Checking config:", logCompliantTenderlyConfig);
    fs_1.default.mkdirSync(configDir, { recursive: true });
    fs_1.default.writeFileSync(exports.configFilePath, yaml.dump(config), "utf8");
}
exports.writeConfig = writeConfig;
function configExists() {
    logger_1.logger.trace("Checking if tenderly config exists.");
    const exists = fs_1.default.existsSync(exports.configFilePath);
    logger_1.logger.trace(exists ? "Tenderly config exists." : "Tenderly config doesn't exist.");
    return exists;
}
exports.configExists = configExists;
function isAccessTokenSet() {
    logger_1.logger.trace("Determining if access token in tenderly config file is set.");
    const config = getConfig();
    const isSet = config.access_key !== undefined && config.access_key !== null && config.access_key !== "";
    logger_1.logger.trace(isSet ? "Access key is set." : "Access key is not set.");
    return isSet;
}
exports.isAccessTokenSet = isAccessTokenSet;
function getAccessToken() {
    logger_1.logger.trace("Getting access token.");
    if (!isAccessTokenSet()) {
        logger_1.logger.warn("Access key is not set, returning empty string value.");
        return "";
    }
    return getConfig().access_key;
}
exports.getAccessToken = getAccessToken;
function setAccessToken(accessToken) {
    logger_1.logger.trace("Setting access key.");
    const config = getConfig();
    config.access_key = accessToken;
    writeConfig(config);
}
exports.setAccessToken = setAccessToken;
//# sourceMappingURL=config.js.map